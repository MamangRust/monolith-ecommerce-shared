// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: review.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReviewService_FindAll_FullMethodName                  = "/pb.ReviewService/FindAll"
	ReviewService_FindByProduct_FullMethodName            = "/pb.ReviewService/FindByProduct"
	ReviewService_FindByMerchant_FullMethodName           = "/pb.ReviewService/FindByMerchant"
	ReviewService_FindByTrashed_FullMethodName            = "/pb.ReviewService/FindByTrashed"
	ReviewService_FindByActive_FullMethodName             = "/pb.ReviewService/FindByActive"
	ReviewService_Create_FullMethodName                   = "/pb.ReviewService/Create"
	ReviewService_Update_FullMethodName                   = "/pb.ReviewService/Update"
	ReviewService_TrashedReview_FullMethodName            = "/pb.ReviewService/TrashedReview"
	ReviewService_RestoreReview_FullMethodName            = "/pb.ReviewService/RestoreReview"
	ReviewService_DeleteReviewPermanent_FullMethodName    = "/pb.ReviewService/DeleteReviewPermanent"
	ReviewService_RestoreAllReview_FullMethodName         = "/pb.ReviewService/RestoreAllReview"
	ReviewService_DeleteAllReviewPermanent_FullMethodName = "/pb.ReviewService/DeleteAllReviewPermanent"
)

// ReviewServiceClient is the client API for ReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewServiceClient interface {
	FindAll(ctx context.Context, in *FindAllReviewRequest, opts ...grpc.CallOption) (*ApiResponsePaginationReview, error)
	FindByProduct(ctx context.Context, in *FindAllReviewProductRequest, opts ...grpc.CallOption) (*ApiResponsePaginationReviewDetail, error)
	FindByMerchant(ctx context.Context, in *FindAllReviewMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationReviewDetail, error)
	FindByTrashed(ctx context.Context, in *FindAllReviewRequest, opts ...grpc.CallOption) (*ApiResponsePaginationReviewDeleteAt, error)
	FindByActive(ctx context.Context, in *FindAllReviewRequest, opts ...grpc.CallOption) (*ApiResponsePaginationReviewDeleteAt, error)
	Create(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*ApiResponseReview, error)
	Update(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*ApiResponseReview, error)
	TrashedReview(ctx context.Context, in *FindByIdReviewRequest, opts ...grpc.CallOption) (*ApiResponseReviewDeleteAt, error)
	RestoreReview(ctx context.Context, in *FindByIdReviewRequest, opts ...grpc.CallOption) (*ApiResponseReviewDeleteAt, error)
	DeleteReviewPermanent(ctx context.Context, in *FindByIdReviewRequest, opts ...grpc.CallOption) (*ApiResponseReviewDelete, error)
	RestoreAllReview(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseReviewAll, error)
	DeleteAllReviewPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseReviewAll, error)
}

type reviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewServiceClient(cc grpc.ClientConnInterface) ReviewServiceClient {
	return &reviewServiceClient{cc}
}

func (c *reviewServiceClient) FindAll(ctx context.Context, in *FindAllReviewRequest, opts ...grpc.CallOption) (*ApiResponsePaginationReview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationReview)
	err := c.cc.Invoke(ctx, ReviewService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) FindByProduct(ctx context.Context, in *FindAllReviewProductRequest, opts ...grpc.CallOption) (*ApiResponsePaginationReviewDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationReviewDetail)
	err := c.cc.Invoke(ctx, ReviewService_FindByProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) FindByMerchant(ctx context.Context, in *FindAllReviewMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationReviewDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationReviewDetail)
	err := c.cc.Invoke(ctx, ReviewService_FindByMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) FindByTrashed(ctx context.Context, in *FindAllReviewRequest, opts ...grpc.CallOption) (*ApiResponsePaginationReviewDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationReviewDeleteAt)
	err := c.cc.Invoke(ctx, ReviewService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) FindByActive(ctx context.Context, in *FindAllReviewRequest, opts ...grpc.CallOption) (*ApiResponsePaginationReviewDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationReviewDeleteAt)
	err := c.cc.Invoke(ctx, ReviewService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) Create(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*ApiResponseReview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseReview)
	err := c.cc.Invoke(ctx, ReviewService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) Update(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*ApiResponseReview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseReview)
	err := c.cc.Invoke(ctx, ReviewService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) TrashedReview(ctx context.Context, in *FindByIdReviewRequest, opts ...grpc.CallOption) (*ApiResponseReviewDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseReviewDeleteAt)
	err := c.cc.Invoke(ctx, ReviewService_TrashedReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) RestoreReview(ctx context.Context, in *FindByIdReviewRequest, opts ...grpc.CallOption) (*ApiResponseReviewDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseReviewDeleteAt)
	err := c.cc.Invoke(ctx, ReviewService_RestoreReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) DeleteReviewPermanent(ctx context.Context, in *FindByIdReviewRequest, opts ...grpc.CallOption) (*ApiResponseReviewDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseReviewDelete)
	err := c.cc.Invoke(ctx, ReviewService_DeleteReviewPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) RestoreAllReview(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseReviewAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseReviewAll)
	err := c.cc.Invoke(ctx, ReviewService_RestoreAllReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) DeleteAllReviewPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseReviewAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseReviewAll)
	err := c.cc.Invoke(ctx, ReviewService_DeleteAllReviewPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServiceServer is the server API for ReviewService service.
// All implementations must embed UnimplementedReviewServiceServer
// for forward compatibility.
type ReviewServiceServer interface {
	FindAll(context.Context, *FindAllReviewRequest) (*ApiResponsePaginationReview, error)
	FindByProduct(context.Context, *FindAllReviewProductRequest) (*ApiResponsePaginationReviewDetail, error)
	FindByMerchant(context.Context, *FindAllReviewMerchantRequest) (*ApiResponsePaginationReviewDetail, error)
	FindByTrashed(context.Context, *FindAllReviewRequest) (*ApiResponsePaginationReviewDeleteAt, error)
	FindByActive(context.Context, *FindAllReviewRequest) (*ApiResponsePaginationReviewDeleteAt, error)
	Create(context.Context, *CreateReviewRequest) (*ApiResponseReview, error)
	Update(context.Context, *UpdateReviewRequest) (*ApiResponseReview, error)
	TrashedReview(context.Context, *FindByIdReviewRequest) (*ApiResponseReviewDeleteAt, error)
	RestoreReview(context.Context, *FindByIdReviewRequest) (*ApiResponseReviewDeleteAt, error)
	DeleteReviewPermanent(context.Context, *FindByIdReviewRequest) (*ApiResponseReviewDelete, error)
	RestoreAllReview(context.Context, *emptypb.Empty) (*ApiResponseReviewAll, error)
	DeleteAllReviewPermanent(context.Context, *emptypb.Empty) (*ApiResponseReviewAll, error)
	mustEmbedUnimplementedReviewServiceServer()
}

// UnimplementedReviewServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReviewServiceServer struct{}

func (UnimplementedReviewServiceServer) FindAll(context.Context, *FindAllReviewRequest) (*ApiResponsePaginationReview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedReviewServiceServer) FindByProduct(context.Context, *FindAllReviewProductRequest) (*ApiResponsePaginationReviewDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByProduct not implemented")
}
func (UnimplementedReviewServiceServer) FindByMerchant(context.Context, *FindAllReviewMerchantRequest) (*ApiResponsePaginationReviewDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByMerchant not implemented")
}
func (UnimplementedReviewServiceServer) FindByTrashed(context.Context, *FindAllReviewRequest) (*ApiResponsePaginationReviewDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedReviewServiceServer) FindByActive(context.Context, *FindAllReviewRequest) (*ApiResponsePaginationReviewDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedReviewServiceServer) Create(context.Context, *CreateReviewRequest) (*ApiResponseReview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedReviewServiceServer) Update(context.Context, *UpdateReviewRequest) (*ApiResponseReview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReviewServiceServer) TrashedReview(context.Context, *FindByIdReviewRequest) (*ApiResponseReviewDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedReview not implemented")
}
func (UnimplementedReviewServiceServer) RestoreReview(context.Context, *FindByIdReviewRequest) (*ApiResponseReviewDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreReview not implemented")
}
func (UnimplementedReviewServiceServer) DeleteReviewPermanent(context.Context, *FindByIdReviewRequest) (*ApiResponseReviewDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReviewPermanent not implemented")
}
func (UnimplementedReviewServiceServer) RestoreAllReview(context.Context, *emptypb.Empty) (*ApiResponseReviewAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllReview not implemented")
}
func (UnimplementedReviewServiceServer) DeleteAllReviewPermanent(context.Context, *emptypb.Empty) (*ApiResponseReviewAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllReviewPermanent not implemented")
}
func (UnimplementedReviewServiceServer) mustEmbedUnimplementedReviewServiceServer() {}
func (UnimplementedReviewServiceServer) testEmbeddedByValue()                       {}

// UnsafeReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServiceServer will
// result in compilation errors.
type UnsafeReviewServiceServer interface {
	mustEmbedUnimplementedReviewServiceServer()
}

func RegisterReviewServiceServer(s grpc.ServiceRegistrar, srv ReviewServiceServer) {
	// If the following call pancis, it indicates UnimplementedReviewServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReviewService_ServiceDesc, srv)
}

func _ReviewService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).FindAll(ctx, req.(*FindAllReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_FindByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllReviewProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).FindByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_FindByProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).FindByProduct(ctx, req.(*FindAllReviewProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_FindByMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllReviewMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).FindByMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_FindByMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).FindByMerchant(ctx, req.(*FindAllReviewMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).FindByTrashed(ctx, req.(*FindAllReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).FindByActive(ctx, req.(*FindAllReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).Create(ctx, req.(*CreateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).Update(ctx, req.(*UpdateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_TrashedReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).TrashedReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_TrashedReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).TrashedReview(ctx, req.(*FindByIdReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_RestoreReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).RestoreReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_RestoreReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).RestoreReview(ctx, req.(*FindByIdReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_DeleteReviewPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).DeleteReviewPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_DeleteReviewPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).DeleteReviewPermanent(ctx, req.(*FindByIdReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_RestoreAllReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).RestoreAllReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_RestoreAllReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).RestoreAllReview(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_DeleteAllReviewPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).DeleteAllReviewPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_DeleteAllReviewPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).DeleteAllReviewPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewService_ServiceDesc is the grpc.ServiceDesc for ReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ReviewService",
	HandlerType: (*ReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _ReviewService_FindAll_Handler,
		},
		{
			MethodName: "FindByProduct",
			Handler:    _ReviewService_FindByProduct_Handler,
		},
		{
			MethodName: "FindByMerchant",
			Handler:    _ReviewService_FindByMerchant_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _ReviewService_FindByTrashed_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _ReviewService_FindByActive_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ReviewService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ReviewService_Update_Handler,
		},
		{
			MethodName: "TrashedReview",
			Handler:    _ReviewService_TrashedReview_Handler,
		},
		{
			MethodName: "RestoreReview",
			Handler:    _ReviewService_RestoreReview_Handler,
		},
		{
			MethodName: "DeleteReviewPermanent",
			Handler:    _ReviewService_DeleteReviewPermanent_Handler,
		},
		{
			MethodName: "RestoreAllReview",
			Handler:    _ReviewService_RestoreAllReview_Handler,
		},
		{
			MethodName: "DeleteAllReviewPermanent",
			Handler:    _ReviewService_DeleteAllReviewPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "review.proto",
}
