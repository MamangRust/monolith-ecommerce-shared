// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: merchant_detail.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantDetailService_FindAll_FullMethodName                          = "/pb.MerchantDetailService/FindAll"
	MerchantDetailService_FindById_FullMethodName                         = "/pb.MerchantDetailService/FindById"
	MerchantDetailService_FindByActive_FullMethodName                     = "/pb.MerchantDetailService/FindByActive"
	MerchantDetailService_FindByTrashed_FullMethodName                    = "/pb.MerchantDetailService/FindByTrashed"
	MerchantDetailService_Create_FullMethodName                           = "/pb.MerchantDetailService/Create"
	MerchantDetailService_Update_FullMethodName                           = "/pb.MerchantDetailService/Update"
	MerchantDetailService_TrashedMerchantDetail_FullMethodName            = "/pb.MerchantDetailService/TrashedMerchantDetail"
	MerchantDetailService_RestoreMerchantDetail_FullMethodName            = "/pb.MerchantDetailService/RestoreMerchantDetail"
	MerchantDetailService_DeleteMerchantDetailPermanent_FullMethodName    = "/pb.MerchantDetailService/DeleteMerchantDetailPermanent"
	MerchantDetailService_RestoreAllMerchantDetail_FullMethodName         = "/pb.MerchantDetailService/RestoreAllMerchantDetail"
	MerchantDetailService_DeleteAllMerchantDetailPermanent_FullMethodName = "/pb.MerchantDetailService/DeleteAllMerchantDetailPermanent"
)

// MerchantDetailServiceClient is the client API for MerchantDetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantDetailServiceClient interface {
	FindAll(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDetail, error)
	FindById(ctx context.Context, in *FindByIdMerchantDetailRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDetail, error)
	FindByActive(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDetailDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDetailDeleteAt, error)
	Create(ctx context.Context, in *CreateMerchantDetailRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDetail, error)
	Update(ctx context.Context, in *UpdateMerchantDetailRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDetail, error)
	TrashedMerchantDetail(ctx context.Context, in *FindByIdMerchantDetailRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDetailDeleteAt, error)
	RestoreMerchantDetail(ctx context.Context, in *FindByIdMerchantDetailRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDetailDeleteAt, error)
	DeleteMerchantDetailPermanent(ctx context.Context, in *FindByIdMerchantDetailRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDelete, error)
	RestoreAllMerchantDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error)
	DeleteAllMerchantDetailPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error)
}

type merchantDetailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantDetailServiceClient(cc grpc.ClientConnInterface) MerchantDetailServiceClient {
	return &merchantDetailServiceClient{cc}
}

func (c *merchantDetailServiceClient) FindAll(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDetail)
	err := c.cc.Invoke(ctx, MerchantDetailService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDetailServiceClient) FindById(ctx context.Context, in *FindByIdMerchantDetailRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDetail)
	err := c.cc.Invoke(ctx, MerchantDetailService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDetailServiceClient) FindByActive(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDetailDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDetailDeleteAt)
	err := c.cc.Invoke(ctx, MerchantDetailService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDetailServiceClient) FindByTrashed(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantDetailDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantDetailDeleteAt)
	err := c.cc.Invoke(ctx, MerchantDetailService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDetailServiceClient) Create(ctx context.Context, in *CreateMerchantDetailRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDetail)
	err := c.cc.Invoke(ctx, MerchantDetailService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDetailServiceClient) Update(ctx context.Context, in *UpdateMerchantDetailRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDetail)
	err := c.cc.Invoke(ctx, MerchantDetailService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDetailServiceClient) TrashedMerchantDetail(ctx context.Context, in *FindByIdMerchantDetailRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDetailDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDetailDeleteAt)
	err := c.cc.Invoke(ctx, MerchantDetailService_TrashedMerchantDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDetailServiceClient) RestoreMerchantDetail(ctx context.Context, in *FindByIdMerchantDetailRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDetailDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDetailDeleteAt)
	err := c.cc.Invoke(ctx, MerchantDetailService_RestoreMerchantDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDetailServiceClient) DeleteMerchantDetailPermanent(ctx context.Context, in *FindByIdMerchantDetailRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDelete)
	err := c.cc.Invoke(ctx, MerchantDetailService_DeleteMerchantDetailPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDetailServiceClient) RestoreAllMerchantDetail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAll)
	err := c.cc.Invoke(ctx, MerchantDetailService_RestoreAllMerchantDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantDetailServiceClient) DeleteAllMerchantDetailPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAll)
	err := c.cc.Invoke(ctx, MerchantDetailService_DeleteAllMerchantDetailPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantDetailServiceServer is the server API for MerchantDetailService service.
// All implementations must embed UnimplementedMerchantDetailServiceServer
// for forward compatibility.
type MerchantDetailServiceServer interface {
	FindAll(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDetail, error)
	FindById(context.Context, *FindByIdMerchantDetailRequest) (*ApiResponseMerchantDetail, error)
	FindByActive(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDetailDeleteAt, error)
	FindByTrashed(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDetailDeleteAt, error)
	Create(context.Context, *CreateMerchantDetailRequest) (*ApiResponseMerchantDetail, error)
	Update(context.Context, *UpdateMerchantDetailRequest) (*ApiResponseMerchantDetail, error)
	TrashedMerchantDetail(context.Context, *FindByIdMerchantDetailRequest) (*ApiResponseMerchantDetailDeleteAt, error)
	RestoreMerchantDetail(context.Context, *FindByIdMerchantDetailRequest) (*ApiResponseMerchantDetailDeleteAt, error)
	DeleteMerchantDetailPermanent(context.Context, *FindByIdMerchantDetailRequest) (*ApiResponseMerchantDelete, error)
	RestoreAllMerchantDetail(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error)
	DeleteAllMerchantDetailPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error)
	mustEmbedUnimplementedMerchantDetailServiceServer()
}

// UnimplementedMerchantDetailServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantDetailServiceServer struct{}

func (UnimplementedMerchantDetailServiceServer) FindAll(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedMerchantDetailServiceServer) FindById(context.Context, *FindByIdMerchantDetailRequest) (*ApiResponseMerchantDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedMerchantDetailServiceServer) FindByActive(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDetailDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedMerchantDetailServiceServer) FindByTrashed(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantDetailDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedMerchantDetailServiceServer) Create(context.Context, *CreateMerchantDetailRequest) (*ApiResponseMerchantDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMerchantDetailServiceServer) Update(context.Context, *UpdateMerchantDetailRequest) (*ApiResponseMerchantDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMerchantDetailServiceServer) TrashedMerchantDetail(context.Context, *FindByIdMerchantDetailRequest) (*ApiResponseMerchantDetailDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedMerchantDetail not implemented")
}
func (UnimplementedMerchantDetailServiceServer) RestoreMerchantDetail(context.Context, *FindByIdMerchantDetailRequest) (*ApiResponseMerchantDetailDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreMerchantDetail not implemented")
}
func (UnimplementedMerchantDetailServiceServer) DeleteMerchantDetailPermanent(context.Context, *FindByIdMerchantDetailRequest) (*ApiResponseMerchantDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMerchantDetailPermanent not implemented")
}
func (UnimplementedMerchantDetailServiceServer) RestoreAllMerchantDetail(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllMerchantDetail not implemented")
}
func (UnimplementedMerchantDetailServiceServer) DeleteAllMerchantDetailPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMerchantDetailPermanent not implemented")
}
func (UnimplementedMerchantDetailServiceServer) mustEmbedUnimplementedMerchantDetailServiceServer() {}
func (UnimplementedMerchantDetailServiceServer) testEmbeddedByValue()                               {}

// UnsafeMerchantDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantDetailServiceServer will
// result in compilation errors.
type UnsafeMerchantDetailServiceServer interface {
	mustEmbedUnimplementedMerchantDetailServiceServer()
}

func RegisterMerchantDetailServiceServer(s grpc.ServiceRegistrar, srv MerchantDetailServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantDetailServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantDetailService_ServiceDesc, srv)
}

func _MerchantDetailService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDetailServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDetailService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDetailServiceServer).FindAll(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDetailService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDetailServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDetailService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDetailServiceServer).FindById(ctx, req.(*FindByIdMerchantDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDetailService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDetailServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDetailService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDetailServiceServer).FindByActive(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDetailService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDetailServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDetailService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDetailServiceServer).FindByTrashed(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDetailService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDetailServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDetailService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDetailServiceServer).Create(ctx, req.(*CreateMerchantDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDetailService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDetailServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDetailService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDetailServiceServer).Update(ctx, req.(*UpdateMerchantDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDetailService_TrashedMerchantDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDetailServiceServer).TrashedMerchantDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDetailService_TrashedMerchantDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDetailServiceServer).TrashedMerchantDetail(ctx, req.(*FindByIdMerchantDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDetailService_RestoreMerchantDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDetailServiceServer).RestoreMerchantDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDetailService_RestoreMerchantDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDetailServiceServer).RestoreMerchantDetail(ctx, req.(*FindByIdMerchantDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDetailService_DeleteMerchantDetailPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDetailServiceServer).DeleteMerchantDetailPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDetailService_DeleteMerchantDetailPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDetailServiceServer).DeleteMerchantDetailPermanent(ctx, req.(*FindByIdMerchantDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDetailService_RestoreAllMerchantDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDetailServiceServer).RestoreAllMerchantDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDetailService_RestoreAllMerchantDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDetailServiceServer).RestoreAllMerchantDetail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantDetailService_DeleteAllMerchantDetailPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantDetailServiceServer).DeleteAllMerchantDetailPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantDetailService_DeleteAllMerchantDetailPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantDetailServiceServer).DeleteAllMerchantDetailPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantDetailService_ServiceDesc is the grpc.ServiceDesc for MerchantDetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantDetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MerchantDetailService",
	HandlerType: (*MerchantDetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _MerchantDetailService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _MerchantDetailService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _MerchantDetailService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _MerchantDetailService_FindByTrashed_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MerchantDetailService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MerchantDetailService_Update_Handler,
		},
		{
			MethodName: "TrashedMerchantDetail",
			Handler:    _MerchantDetailService_TrashedMerchantDetail_Handler,
		},
		{
			MethodName: "RestoreMerchantDetail",
			Handler:    _MerchantDetailService_RestoreMerchantDetail_Handler,
		},
		{
			MethodName: "DeleteMerchantDetailPermanent",
			Handler:    _MerchantDetailService_DeleteMerchantDetailPermanent_Handler,
		},
		{
			MethodName: "RestoreAllMerchantDetail",
			Handler:    _MerchantDetailService_RestoreAllMerchantDetail_Handler,
		},
		{
			MethodName: "DeleteAllMerchantDetailPermanent",
			Handler:    _MerchantDetailService_DeleteAllMerchantDetailPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant_detail.proto",
}
