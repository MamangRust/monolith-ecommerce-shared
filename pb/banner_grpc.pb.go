// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: banner.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BannerService_FindAll_FullMethodName                  = "/pb.BannerService/FindAll"
	BannerService_FindById_FullMethodName                 = "/pb.BannerService/FindById"
	BannerService_FindByActive_FullMethodName             = "/pb.BannerService/FindByActive"
	BannerService_FindByTrashed_FullMethodName            = "/pb.BannerService/FindByTrashed"
	BannerService_Create_FullMethodName                   = "/pb.BannerService/Create"
	BannerService_Update_FullMethodName                   = "/pb.BannerService/Update"
	BannerService_TrashedBanner_FullMethodName            = "/pb.BannerService/TrashedBanner"
	BannerService_RestoreBanner_FullMethodName            = "/pb.BannerService/RestoreBanner"
	BannerService_DeleteBannerPermanent_FullMethodName    = "/pb.BannerService/DeleteBannerPermanent"
	BannerService_RestoreAllBanner_FullMethodName         = "/pb.BannerService/RestoreAllBanner"
	BannerService_DeleteAllBannerPermanent_FullMethodName = "/pb.BannerService/DeleteAllBannerPermanent"
)

// BannerServiceClient is the client API for BannerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerServiceClient interface {
	FindAll(ctx context.Context, in *FindAllBannerRequest, opts ...grpc.CallOption) (*ApiResponsePaginationBanner, error)
	FindById(ctx context.Context, in *FindByIdBannerRequest, opts ...grpc.CallOption) (*ApiResponseBanner, error)
	FindByActive(ctx context.Context, in *FindAllBannerRequest, opts ...grpc.CallOption) (*ApiResponsePaginationBannerDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllBannerRequest, opts ...grpc.CallOption) (*ApiResponsePaginationBannerDeleteAt, error)
	Create(ctx context.Context, in *CreateBannerRequest, opts ...grpc.CallOption) (*ApiResponseBanner, error)
	Update(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*ApiResponseBanner, error)
	TrashedBanner(ctx context.Context, in *FindByIdBannerRequest, opts ...grpc.CallOption) (*ApiResponseBannerDeleteAt, error)
	RestoreBanner(ctx context.Context, in *FindByIdBannerRequest, opts ...grpc.CallOption) (*ApiResponseBannerDeleteAt, error)
	DeleteBannerPermanent(ctx context.Context, in *FindByIdBannerRequest, opts ...grpc.CallOption) (*ApiResponseBannerDelete, error)
	RestoreAllBanner(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseBannerAll, error)
	DeleteAllBannerPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseBannerAll, error)
}

type bannerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerServiceClient(cc grpc.ClientConnInterface) BannerServiceClient {
	return &bannerServiceClient{cc}
}

func (c *bannerServiceClient) FindAll(ctx context.Context, in *FindAllBannerRequest, opts ...grpc.CallOption) (*ApiResponsePaginationBanner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationBanner)
	err := c.cc.Invoke(ctx, BannerService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) FindById(ctx context.Context, in *FindByIdBannerRequest, opts ...grpc.CallOption) (*ApiResponseBanner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBanner)
	err := c.cc.Invoke(ctx, BannerService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) FindByActive(ctx context.Context, in *FindAllBannerRequest, opts ...grpc.CallOption) (*ApiResponsePaginationBannerDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationBannerDeleteAt)
	err := c.cc.Invoke(ctx, BannerService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) FindByTrashed(ctx context.Context, in *FindAllBannerRequest, opts ...grpc.CallOption) (*ApiResponsePaginationBannerDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationBannerDeleteAt)
	err := c.cc.Invoke(ctx, BannerService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) Create(ctx context.Context, in *CreateBannerRequest, opts ...grpc.CallOption) (*ApiResponseBanner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBanner)
	err := c.cc.Invoke(ctx, BannerService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) Update(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*ApiResponseBanner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBanner)
	err := c.cc.Invoke(ctx, BannerService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) TrashedBanner(ctx context.Context, in *FindByIdBannerRequest, opts ...grpc.CallOption) (*ApiResponseBannerDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBannerDeleteAt)
	err := c.cc.Invoke(ctx, BannerService_TrashedBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) RestoreBanner(ctx context.Context, in *FindByIdBannerRequest, opts ...grpc.CallOption) (*ApiResponseBannerDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBannerDeleteAt)
	err := c.cc.Invoke(ctx, BannerService_RestoreBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) DeleteBannerPermanent(ctx context.Context, in *FindByIdBannerRequest, opts ...grpc.CallOption) (*ApiResponseBannerDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBannerDelete)
	err := c.cc.Invoke(ctx, BannerService_DeleteBannerPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) RestoreAllBanner(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseBannerAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBannerAll)
	err := c.cc.Invoke(ctx, BannerService_RestoreAllBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) DeleteAllBannerPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseBannerAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseBannerAll)
	err := c.cc.Invoke(ctx, BannerService_DeleteAllBannerPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerServiceServer is the server API for BannerService service.
// All implementations must embed UnimplementedBannerServiceServer
// for forward compatibility.
type BannerServiceServer interface {
	FindAll(context.Context, *FindAllBannerRequest) (*ApiResponsePaginationBanner, error)
	FindById(context.Context, *FindByIdBannerRequest) (*ApiResponseBanner, error)
	FindByActive(context.Context, *FindAllBannerRequest) (*ApiResponsePaginationBannerDeleteAt, error)
	FindByTrashed(context.Context, *FindAllBannerRequest) (*ApiResponsePaginationBannerDeleteAt, error)
	Create(context.Context, *CreateBannerRequest) (*ApiResponseBanner, error)
	Update(context.Context, *UpdateBannerRequest) (*ApiResponseBanner, error)
	TrashedBanner(context.Context, *FindByIdBannerRequest) (*ApiResponseBannerDeleteAt, error)
	RestoreBanner(context.Context, *FindByIdBannerRequest) (*ApiResponseBannerDeleteAt, error)
	DeleteBannerPermanent(context.Context, *FindByIdBannerRequest) (*ApiResponseBannerDelete, error)
	RestoreAllBanner(context.Context, *emptypb.Empty) (*ApiResponseBannerAll, error)
	DeleteAllBannerPermanent(context.Context, *emptypb.Empty) (*ApiResponseBannerAll, error)
	mustEmbedUnimplementedBannerServiceServer()
}

// UnimplementedBannerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBannerServiceServer struct{}

func (UnimplementedBannerServiceServer) FindAll(context.Context, *FindAllBannerRequest) (*ApiResponsePaginationBanner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedBannerServiceServer) FindById(context.Context, *FindByIdBannerRequest) (*ApiResponseBanner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedBannerServiceServer) FindByActive(context.Context, *FindAllBannerRequest) (*ApiResponsePaginationBannerDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedBannerServiceServer) FindByTrashed(context.Context, *FindAllBannerRequest) (*ApiResponsePaginationBannerDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedBannerServiceServer) Create(context.Context, *CreateBannerRequest) (*ApiResponseBanner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBannerServiceServer) Update(context.Context, *UpdateBannerRequest) (*ApiResponseBanner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBannerServiceServer) TrashedBanner(context.Context, *FindByIdBannerRequest) (*ApiResponseBannerDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedBanner not implemented")
}
func (UnimplementedBannerServiceServer) RestoreBanner(context.Context, *FindByIdBannerRequest) (*ApiResponseBannerDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreBanner not implemented")
}
func (UnimplementedBannerServiceServer) DeleteBannerPermanent(context.Context, *FindByIdBannerRequest) (*ApiResponseBannerDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBannerPermanent not implemented")
}
func (UnimplementedBannerServiceServer) RestoreAllBanner(context.Context, *emptypb.Empty) (*ApiResponseBannerAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllBanner not implemented")
}
func (UnimplementedBannerServiceServer) DeleteAllBannerPermanent(context.Context, *emptypb.Empty) (*ApiResponseBannerAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllBannerPermanent not implemented")
}
func (UnimplementedBannerServiceServer) mustEmbedUnimplementedBannerServiceServer() {}
func (UnimplementedBannerServiceServer) testEmbeddedByValue()                       {}

// UnsafeBannerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerServiceServer will
// result in compilation errors.
type UnsafeBannerServiceServer interface {
	mustEmbedUnimplementedBannerServiceServer()
}

func RegisterBannerServiceServer(s grpc.ServiceRegistrar, srv BannerServiceServer) {
	// If the following call pancis, it indicates UnimplementedBannerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BannerService_ServiceDesc, srv)
}

func _BannerService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).FindAll(ctx, req.(*FindAllBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).FindById(ctx, req.(*FindByIdBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).FindByActive(ctx, req.(*FindAllBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).FindByTrashed(ctx, req.(*FindAllBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).Create(ctx, req.(*CreateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).Update(ctx, req.(*UpdateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_TrashedBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).TrashedBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_TrashedBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).TrashedBanner(ctx, req.(*FindByIdBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_RestoreBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).RestoreBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_RestoreBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).RestoreBanner(ctx, req.(*FindByIdBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_DeleteBannerPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).DeleteBannerPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_DeleteBannerPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).DeleteBannerPermanent(ctx, req.(*FindByIdBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_RestoreAllBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).RestoreAllBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_RestoreAllBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).RestoreAllBanner(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_DeleteAllBannerPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).DeleteAllBannerPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_DeleteAllBannerPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).DeleteAllBannerPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BannerService_ServiceDesc is the grpc.ServiceDesc for BannerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BannerService",
	HandlerType: (*BannerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _BannerService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _BannerService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _BannerService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _BannerService_FindByTrashed_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _BannerService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BannerService_Update_Handler,
		},
		{
			MethodName: "TrashedBanner",
			Handler:    _BannerService_TrashedBanner_Handler,
		},
		{
			MethodName: "RestoreBanner",
			Handler:    _BannerService_RestoreBanner_Handler,
		},
		{
			MethodName: "DeleteBannerPermanent",
			Handler:    _BannerService_DeleteBannerPermanent_Handler,
		},
		{
			MethodName: "RestoreAllBanner",
			Handler:    _BannerService_RestoreAllBanner_Handler,
		},
		{
			MethodName: "DeleteAllBannerPermanent",
			Handler:    _BannerService_DeleteAllBannerPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banner.proto",
}
