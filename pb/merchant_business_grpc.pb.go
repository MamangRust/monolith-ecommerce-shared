// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: merchant_business.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantBusinessService_FindAll_FullMethodName                            = "/pb.MerchantBusinessService/FindAll"
	MerchantBusinessService_FindById_FullMethodName                           = "/pb.MerchantBusinessService/FindById"
	MerchantBusinessService_FindByActive_FullMethodName                       = "/pb.MerchantBusinessService/FindByActive"
	MerchantBusinessService_FindByTrashed_FullMethodName                      = "/pb.MerchantBusinessService/FindByTrashed"
	MerchantBusinessService_Create_FullMethodName                             = "/pb.MerchantBusinessService/Create"
	MerchantBusinessService_Update_FullMethodName                             = "/pb.MerchantBusinessService/Update"
	MerchantBusinessService_TrashedMerchantBusiness_FullMethodName            = "/pb.MerchantBusinessService/TrashedMerchantBusiness"
	MerchantBusinessService_RestoreMerchantBusiness_FullMethodName            = "/pb.MerchantBusinessService/RestoreMerchantBusiness"
	MerchantBusinessService_DeleteMerchantBusinessPermanent_FullMethodName    = "/pb.MerchantBusinessService/DeleteMerchantBusinessPermanent"
	MerchantBusinessService_RestoreAllMerchantBusiness_FullMethodName         = "/pb.MerchantBusinessService/RestoreAllMerchantBusiness"
	MerchantBusinessService_DeleteAllMerchantBusinessPermanent_FullMethodName = "/pb.MerchantBusinessService/DeleteAllMerchantBusinessPermanent"
)

// MerchantBusinessServiceClient is the client API for MerchantBusinessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantBusinessServiceClient interface {
	FindAll(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantBusiness, error)
	FindById(ctx context.Context, in *FindByIdMerchantBusinessRequest, opts ...grpc.CallOption) (*ApiResponseMerchantBusiness, error)
	FindByActive(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantBusinessDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantBusinessDeleteAt, error)
	Create(ctx context.Context, in *CreateMerchantBusinessRequest, opts ...grpc.CallOption) (*ApiResponseMerchantBusiness, error)
	Update(ctx context.Context, in *UpdateMerchantBusinessRequest, opts ...grpc.CallOption) (*ApiResponseMerchantBusiness, error)
	TrashedMerchantBusiness(ctx context.Context, in *FindByIdMerchantBusinessRequest, opts ...grpc.CallOption) (*ApiResponseMerchantBusinessDeleteAt, error)
	RestoreMerchantBusiness(ctx context.Context, in *FindByIdMerchantBusinessRequest, opts ...grpc.CallOption) (*ApiResponseMerchantBusinessDeleteAt, error)
	DeleteMerchantBusinessPermanent(ctx context.Context, in *FindByIdMerchantBusinessRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDelete, error)
	RestoreAllMerchantBusiness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error)
	DeleteAllMerchantBusinessPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error)
}

type merchantBusinessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantBusinessServiceClient(cc grpc.ClientConnInterface) MerchantBusinessServiceClient {
	return &merchantBusinessServiceClient{cc}
}

func (c *merchantBusinessServiceClient) FindAll(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantBusiness, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantBusiness)
	err := c.cc.Invoke(ctx, MerchantBusinessService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBusinessServiceClient) FindById(ctx context.Context, in *FindByIdMerchantBusinessRequest, opts ...grpc.CallOption) (*ApiResponseMerchantBusiness, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantBusiness)
	err := c.cc.Invoke(ctx, MerchantBusinessService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBusinessServiceClient) FindByActive(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantBusinessDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantBusinessDeleteAt)
	err := c.cc.Invoke(ctx, MerchantBusinessService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBusinessServiceClient) FindByTrashed(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantBusinessDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantBusinessDeleteAt)
	err := c.cc.Invoke(ctx, MerchantBusinessService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBusinessServiceClient) Create(ctx context.Context, in *CreateMerchantBusinessRequest, opts ...grpc.CallOption) (*ApiResponseMerchantBusiness, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantBusiness)
	err := c.cc.Invoke(ctx, MerchantBusinessService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBusinessServiceClient) Update(ctx context.Context, in *UpdateMerchantBusinessRequest, opts ...grpc.CallOption) (*ApiResponseMerchantBusiness, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantBusiness)
	err := c.cc.Invoke(ctx, MerchantBusinessService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBusinessServiceClient) TrashedMerchantBusiness(ctx context.Context, in *FindByIdMerchantBusinessRequest, opts ...grpc.CallOption) (*ApiResponseMerchantBusinessDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantBusinessDeleteAt)
	err := c.cc.Invoke(ctx, MerchantBusinessService_TrashedMerchantBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBusinessServiceClient) RestoreMerchantBusiness(ctx context.Context, in *FindByIdMerchantBusinessRequest, opts ...grpc.CallOption) (*ApiResponseMerchantBusinessDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantBusinessDeleteAt)
	err := c.cc.Invoke(ctx, MerchantBusinessService_RestoreMerchantBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBusinessServiceClient) DeleteMerchantBusinessPermanent(ctx context.Context, in *FindByIdMerchantBusinessRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDelete)
	err := c.cc.Invoke(ctx, MerchantBusinessService_DeleteMerchantBusinessPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBusinessServiceClient) RestoreAllMerchantBusiness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAll)
	err := c.cc.Invoke(ctx, MerchantBusinessService_RestoreAllMerchantBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantBusinessServiceClient) DeleteAllMerchantBusinessPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAll)
	err := c.cc.Invoke(ctx, MerchantBusinessService_DeleteAllMerchantBusinessPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantBusinessServiceServer is the server API for MerchantBusinessService service.
// All implementations must embed UnimplementedMerchantBusinessServiceServer
// for forward compatibility.
type MerchantBusinessServiceServer interface {
	FindAll(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantBusiness, error)
	FindById(context.Context, *FindByIdMerchantBusinessRequest) (*ApiResponseMerchantBusiness, error)
	FindByActive(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantBusinessDeleteAt, error)
	FindByTrashed(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantBusinessDeleteAt, error)
	Create(context.Context, *CreateMerchantBusinessRequest) (*ApiResponseMerchantBusiness, error)
	Update(context.Context, *UpdateMerchantBusinessRequest) (*ApiResponseMerchantBusiness, error)
	TrashedMerchantBusiness(context.Context, *FindByIdMerchantBusinessRequest) (*ApiResponseMerchantBusinessDeleteAt, error)
	RestoreMerchantBusiness(context.Context, *FindByIdMerchantBusinessRequest) (*ApiResponseMerchantBusinessDeleteAt, error)
	DeleteMerchantBusinessPermanent(context.Context, *FindByIdMerchantBusinessRequest) (*ApiResponseMerchantDelete, error)
	RestoreAllMerchantBusiness(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error)
	DeleteAllMerchantBusinessPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error)
	mustEmbedUnimplementedMerchantBusinessServiceServer()
}

// UnimplementedMerchantBusinessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantBusinessServiceServer struct{}

func (UnimplementedMerchantBusinessServiceServer) FindAll(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantBusiness, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedMerchantBusinessServiceServer) FindById(context.Context, *FindByIdMerchantBusinessRequest) (*ApiResponseMerchantBusiness, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedMerchantBusinessServiceServer) FindByActive(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantBusinessDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedMerchantBusinessServiceServer) FindByTrashed(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantBusinessDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedMerchantBusinessServiceServer) Create(context.Context, *CreateMerchantBusinessRequest) (*ApiResponseMerchantBusiness, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMerchantBusinessServiceServer) Update(context.Context, *UpdateMerchantBusinessRequest) (*ApiResponseMerchantBusiness, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMerchantBusinessServiceServer) TrashedMerchantBusiness(context.Context, *FindByIdMerchantBusinessRequest) (*ApiResponseMerchantBusinessDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedMerchantBusiness not implemented")
}
func (UnimplementedMerchantBusinessServiceServer) RestoreMerchantBusiness(context.Context, *FindByIdMerchantBusinessRequest) (*ApiResponseMerchantBusinessDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreMerchantBusiness not implemented")
}
func (UnimplementedMerchantBusinessServiceServer) DeleteMerchantBusinessPermanent(context.Context, *FindByIdMerchantBusinessRequest) (*ApiResponseMerchantDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMerchantBusinessPermanent not implemented")
}
func (UnimplementedMerchantBusinessServiceServer) RestoreAllMerchantBusiness(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllMerchantBusiness not implemented")
}
func (UnimplementedMerchantBusinessServiceServer) DeleteAllMerchantBusinessPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMerchantBusinessPermanent not implemented")
}
func (UnimplementedMerchantBusinessServiceServer) mustEmbedUnimplementedMerchantBusinessServiceServer() {
}
func (UnimplementedMerchantBusinessServiceServer) testEmbeddedByValue() {}

// UnsafeMerchantBusinessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantBusinessServiceServer will
// result in compilation errors.
type UnsafeMerchantBusinessServiceServer interface {
	mustEmbedUnimplementedMerchantBusinessServiceServer()
}

func RegisterMerchantBusinessServiceServer(s grpc.ServiceRegistrar, srv MerchantBusinessServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantBusinessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantBusinessService_ServiceDesc, srv)
}

func _MerchantBusinessService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBusinessServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantBusinessService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBusinessServiceServer).FindAll(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBusinessService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBusinessServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantBusinessService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBusinessServiceServer).FindById(ctx, req.(*FindByIdMerchantBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBusinessService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBusinessServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantBusinessService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBusinessServiceServer).FindByActive(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBusinessService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBusinessServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantBusinessService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBusinessServiceServer).FindByTrashed(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBusinessService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBusinessServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantBusinessService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBusinessServiceServer).Create(ctx, req.(*CreateMerchantBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBusinessService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBusinessServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantBusinessService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBusinessServiceServer).Update(ctx, req.(*UpdateMerchantBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBusinessService_TrashedMerchantBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBusinessServiceServer).TrashedMerchantBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantBusinessService_TrashedMerchantBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBusinessServiceServer).TrashedMerchantBusiness(ctx, req.(*FindByIdMerchantBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBusinessService_RestoreMerchantBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBusinessServiceServer).RestoreMerchantBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantBusinessService_RestoreMerchantBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBusinessServiceServer).RestoreMerchantBusiness(ctx, req.(*FindByIdMerchantBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBusinessService_DeleteMerchantBusinessPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBusinessServiceServer).DeleteMerchantBusinessPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantBusinessService_DeleteMerchantBusinessPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBusinessServiceServer).DeleteMerchantBusinessPermanent(ctx, req.(*FindByIdMerchantBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBusinessService_RestoreAllMerchantBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBusinessServiceServer).RestoreAllMerchantBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantBusinessService_RestoreAllMerchantBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBusinessServiceServer).RestoreAllMerchantBusiness(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantBusinessService_DeleteAllMerchantBusinessPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantBusinessServiceServer).DeleteAllMerchantBusinessPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantBusinessService_DeleteAllMerchantBusinessPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantBusinessServiceServer).DeleteAllMerchantBusinessPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantBusinessService_ServiceDesc is the grpc.ServiceDesc for MerchantBusinessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantBusinessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MerchantBusinessService",
	HandlerType: (*MerchantBusinessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _MerchantBusinessService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _MerchantBusinessService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _MerchantBusinessService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _MerchantBusinessService_FindByTrashed_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MerchantBusinessService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MerchantBusinessService_Update_Handler,
		},
		{
			MethodName: "TrashedMerchantBusiness",
			Handler:    _MerchantBusinessService_TrashedMerchantBusiness_Handler,
		},
		{
			MethodName: "RestoreMerchantBusiness",
			Handler:    _MerchantBusinessService_RestoreMerchantBusiness_Handler,
		},
		{
			MethodName: "DeleteMerchantBusinessPermanent",
			Handler:    _MerchantBusinessService_DeleteMerchantBusinessPermanent_Handler,
		},
		{
			MethodName: "RestoreAllMerchantBusiness",
			Handler:    _MerchantBusinessService_RestoreAllMerchantBusiness_Handler,
		},
		{
			MethodName: "DeleteAllMerchantBusinessPermanent",
			Handler:    _MerchantBusinessService_DeleteAllMerchantBusinessPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant_business.proto",
}
