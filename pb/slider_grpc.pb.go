// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: slider.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SliderService_FindAll_FullMethodName                  = "/pb.SliderService/FindAll"
	SliderService_FindByTrashed_FullMethodName            = "/pb.SliderService/FindByTrashed"
	SliderService_FindByActive_FullMethodName             = "/pb.SliderService/FindByActive"
	SliderService_Create_FullMethodName                   = "/pb.SliderService/Create"
	SliderService_Update_FullMethodName                   = "/pb.SliderService/Update"
	SliderService_TrashedSlider_FullMethodName            = "/pb.SliderService/TrashedSlider"
	SliderService_RestoreSlider_FullMethodName            = "/pb.SliderService/RestoreSlider"
	SliderService_DeleteSliderPermanent_FullMethodName    = "/pb.SliderService/DeleteSliderPermanent"
	SliderService_RestoreAllSlider_FullMethodName         = "/pb.SliderService/RestoreAllSlider"
	SliderService_DeleteAllSliderPermanent_FullMethodName = "/pb.SliderService/DeleteAllSliderPermanent"
)

// SliderServiceClient is the client API for SliderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SliderServiceClient interface {
	FindAll(ctx context.Context, in *FindAllSliderRequest, opts ...grpc.CallOption) (*ApiResponsePaginationSlider, error)
	FindByTrashed(ctx context.Context, in *FindAllSliderRequest, opts ...grpc.CallOption) (*ApiResponsePaginationSliderDeleteAt, error)
	FindByActive(ctx context.Context, in *FindAllSliderRequest, opts ...grpc.CallOption) (*ApiResponsePaginationSliderDeleteAt, error)
	Create(ctx context.Context, in *CreateSliderRequest, opts ...grpc.CallOption) (*ApiResponseSlider, error)
	Update(ctx context.Context, in *UpdateSliderRequest, opts ...grpc.CallOption) (*ApiResponseSlider, error)
	TrashedSlider(ctx context.Context, in *FindByIdSliderRequest, opts ...grpc.CallOption) (*ApiResponseSliderDeleteAt, error)
	RestoreSlider(ctx context.Context, in *FindByIdSliderRequest, opts ...grpc.CallOption) (*ApiResponseSliderDeleteAt, error)
	DeleteSliderPermanent(ctx context.Context, in *FindByIdSliderRequest, opts ...grpc.CallOption) (*ApiResponseSliderDelete, error)
	RestoreAllSlider(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseSliderAll, error)
	DeleteAllSliderPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseSliderAll, error)
}

type sliderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSliderServiceClient(cc grpc.ClientConnInterface) SliderServiceClient {
	return &sliderServiceClient{cc}
}

func (c *sliderServiceClient) FindAll(ctx context.Context, in *FindAllSliderRequest, opts ...grpc.CallOption) (*ApiResponsePaginationSlider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationSlider)
	err := c.cc.Invoke(ctx, SliderService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliderServiceClient) FindByTrashed(ctx context.Context, in *FindAllSliderRequest, opts ...grpc.CallOption) (*ApiResponsePaginationSliderDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationSliderDeleteAt)
	err := c.cc.Invoke(ctx, SliderService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliderServiceClient) FindByActive(ctx context.Context, in *FindAllSliderRequest, opts ...grpc.CallOption) (*ApiResponsePaginationSliderDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationSliderDeleteAt)
	err := c.cc.Invoke(ctx, SliderService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliderServiceClient) Create(ctx context.Context, in *CreateSliderRequest, opts ...grpc.CallOption) (*ApiResponseSlider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseSlider)
	err := c.cc.Invoke(ctx, SliderService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliderServiceClient) Update(ctx context.Context, in *UpdateSliderRequest, opts ...grpc.CallOption) (*ApiResponseSlider, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseSlider)
	err := c.cc.Invoke(ctx, SliderService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliderServiceClient) TrashedSlider(ctx context.Context, in *FindByIdSliderRequest, opts ...grpc.CallOption) (*ApiResponseSliderDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseSliderDeleteAt)
	err := c.cc.Invoke(ctx, SliderService_TrashedSlider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliderServiceClient) RestoreSlider(ctx context.Context, in *FindByIdSliderRequest, opts ...grpc.CallOption) (*ApiResponseSliderDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseSliderDeleteAt)
	err := c.cc.Invoke(ctx, SliderService_RestoreSlider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliderServiceClient) DeleteSliderPermanent(ctx context.Context, in *FindByIdSliderRequest, opts ...grpc.CallOption) (*ApiResponseSliderDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseSliderDelete)
	err := c.cc.Invoke(ctx, SliderService_DeleteSliderPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliderServiceClient) RestoreAllSlider(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseSliderAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseSliderAll)
	err := c.cc.Invoke(ctx, SliderService_RestoreAllSlider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliderServiceClient) DeleteAllSliderPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseSliderAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseSliderAll)
	err := c.cc.Invoke(ctx, SliderService_DeleteAllSliderPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SliderServiceServer is the server API for SliderService service.
// All implementations must embed UnimplementedSliderServiceServer
// for forward compatibility.
type SliderServiceServer interface {
	FindAll(context.Context, *FindAllSliderRequest) (*ApiResponsePaginationSlider, error)
	FindByTrashed(context.Context, *FindAllSliderRequest) (*ApiResponsePaginationSliderDeleteAt, error)
	FindByActive(context.Context, *FindAllSliderRequest) (*ApiResponsePaginationSliderDeleteAt, error)
	Create(context.Context, *CreateSliderRequest) (*ApiResponseSlider, error)
	Update(context.Context, *UpdateSliderRequest) (*ApiResponseSlider, error)
	TrashedSlider(context.Context, *FindByIdSliderRequest) (*ApiResponseSliderDeleteAt, error)
	RestoreSlider(context.Context, *FindByIdSliderRequest) (*ApiResponseSliderDeleteAt, error)
	DeleteSliderPermanent(context.Context, *FindByIdSliderRequest) (*ApiResponseSliderDelete, error)
	RestoreAllSlider(context.Context, *emptypb.Empty) (*ApiResponseSliderAll, error)
	DeleteAllSliderPermanent(context.Context, *emptypb.Empty) (*ApiResponseSliderAll, error)
	mustEmbedUnimplementedSliderServiceServer()
}

// UnimplementedSliderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSliderServiceServer struct{}

func (UnimplementedSliderServiceServer) FindAll(context.Context, *FindAllSliderRequest) (*ApiResponsePaginationSlider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedSliderServiceServer) FindByTrashed(context.Context, *FindAllSliderRequest) (*ApiResponsePaginationSliderDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedSliderServiceServer) FindByActive(context.Context, *FindAllSliderRequest) (*ApiResponsePaginationSliderDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedSliderServiceServer) Create(context.Context, *CreateSliderRequest) (*ApiResponseSlider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSliderServiceServer) Update(context.Context, *UpdateSliderRequest) (*ApiResponseSlider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSliderServiceServer) TrashedSlider(context.Context, *FindByIdSliderRequest) (*ApiResponseSliderDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedSlider not implemented")
}
func (UnimplementedSliderServiceServer) RestoreSlider(context.Context, *FindByIdSliderRequest) (*ApiResponseSliderDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreSlider not implemented")
}
func (UnimplementedSliderServiceServer) DeleteSliderPermanent(context.Context, *FindByIdSliderRequest) (*ApiResponseSliderDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSliderPermanent not implemented")
}
func (UnimplementedSliderServiceServer) RestoreAllSlider(context.Context, *emptypb.Empty) (*ApiResponseSliderAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllSlider not implemented")
}
func (UnimplementedSliderServiceServer) DeleteAllSliderPermanent(context.Context, *emptypb.Empty) (*ApiResponseSliderAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSliderPermanent not implemented")
}
func (UnimplementedSliderServiceServer) mustEmbedUnimplementedSliderServiceServer() {}
func (UnimplementedSliderServiceServer) testEmbeddedByValue()                       {}

// UnsafeSliderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SliderServiceServer will
// result in compilation errors.
type UnsafeSliderServiceServer interface {
	mustEmbedUnimplementedSliderServiceServer()
}

func RegisterSliderServiceServer(s grpc.ServiceRegistrar, srv SliderServiceServer) {
	// If the following call pancis, it indicates UnimplementedSliderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SliderService_ServiceDesc, srv)
}

func _SliderService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllSliderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliderServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliderService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliderServiceServer).FindAll(ctx, req.(*FindAllSliderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliderService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllSliderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliderServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliderService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliderServiceServer).FindByTrashed(ctx, req.(*FindAllSliderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliderService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllSliderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliderServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliderService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliderServiceServer).FindByActive(ctx, req.(*FindAllSliderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSliderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliderService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliderServiceServer).Create(ctx, req.(*CreateSliderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliderService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSliderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliderServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliderService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliderServiceServer).Update(ctx, req.(*UpdateSliderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliderService_TrashedSlider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdSliderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliderServiceServer).TrashedSlider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliderService_TrashedSlider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliderServiceServer).TrashedSlider(ctx, req.(*FindByIdSliderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliderService_RestoreSlider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdSliderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliderServiceServer).RestoreSlider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliderService_RestoreSlider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliderServiceServer).RestoreSlider(ctx, req.(*FindByIdSliderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliderService_DeleteSliderPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdSliderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliderServiceServer).DeleteSliderPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliderService_DeleteSliderPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliderServiceServer).DeleteSliderPermanent(ctx, req.(*FindByIdSliderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliderService_RestoreAllSlider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliderServiceServer).RestoreAllSlider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliderService_RestoreAllSlider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliderServiceServer).RestoreAllSlider(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliderService_DeleteAllSliderPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliderServiceServer).DeleteAllSliderPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliderService_DeleteAllSliderPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliderServiceServer).DeleteAllSliderPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SliderService_ServiceDesc is the grpc.ServiceDesc for SliderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SliderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SliderService",
	HandlerType: (*SliderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _SliderService_FindAll_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _SliderService_FindByTrashed_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _SliderService_FindByActive_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SliderService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SliderService_Update_Handler,
		},
		{
			MethodName: "TrashedSlider",
			Handler:    _SliderService_TrashedSlider_Handler,
		},
		{
			MethodName: "RestoreSlider",
			Handler:    _SliderService_RestoreSlider_Handler,
		},
		{
			MethodName: "DeleteSliderPermanent",
			Handler:    _SliderService_DeleteSliderPermanent_Handler,
		},
		{
			MethodName: "RestoreAllSlider",
			Handler:    _SliderService_RestoreAllSlider_Handler,
		},
		{
			MethodName: "DeleteAllSliderPermanent",
			Handler:    _SliderService_DeleteAllSliderPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slider.proto",
}
