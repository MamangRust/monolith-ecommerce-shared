// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: merchant_award.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantAwardService_FindAll_FullMethodName                         = "/pb.MerchantAwardService/FindAll"
	MerchantAwardService_FindById_FullMethodName                        = "/pb.MerchantAwardService/FindById"
	MerchantAwardService_FindByActive_FullMethodName                    = "/pb.MerchantAwardService/FindByActive"
	MerchantAwardService_FindByTrashed_FullMethodName                   = "/pb.MerchantAwardService/FindByTrashed"
	MerchantAwardService_Create_FullMethodName                          = "/pb.MerchantAwardService/Create"
	MerchantAwardService_Update_FullMethodName                          = "/pb.MerchantAwardService/Update"
	MerchantAwardService_TrashedMerchantAward_FullMethodName            = "/pb.MerchantAwardService/TrashedMerchantAward"
	MerchantAwardService_RestoreMerchantAward_FullMethodName            = "/pb.MerchantAwardService/RestoreMerchantAward"
	MerchantAwardService_DeleteMerchantAwardPermanent_FullMethodName    = "/pb.MerchantAwardService/DeleteMerchantAwardPermanent"
	MerchantAwardService_RestoreAllMerchantAward_FullMethodName         = "/pb.MerchantAwardService/RestoreAllMerchantAward"
	MerchantAwardService_DeleteAllMerchantAwardPermanent_FullMethodName = "/pb.MerchantAwardService/DeleteAllMerchantAwardPermanent"
)

// MerchantAwardServiceClient is the client API for MerchantAwardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantAwardServiceClient interface {
	FindAll(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantAward, error)
	FindById(ctx context.Context, in *FindByIdMerchantAwardRequest, opts ...grpc.CallOption) (*ApiResponseMerchantAward, error)
	FindByActive(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantAwardDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantAwardDeleteAt, error)
	Create(ctx context.Context, in *CreateMerchantAwardRequest, opts ...grpc.CallOption) (*ApiResponseMerchantAward, error)
	Update(ctx context.Context, in *UpdateMerchantAwardRequest, opts ...grpc.CallOption) (*ApiResponseMerchantAward, error)
	TrashedMerchantAward(ctx context.Context, in *FindByIdMerchantAwardRequest, opts ...grpc.CallOption) (*ApiResponseMerchantAwardDeleteAt, error)
	RestoreMerchantAward(ctx context.Context, in *FindByIdMerchantAwardRequest, opts ...grpc.CallOption) (*ApiResponseMerchantAwardDeleteAt, error)
	DeleteMerchantAwardPermanent(ctx context.Context, in *FindByIdMerchantAwardRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDelete, error)
	RestoreAllMerchantAward(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error)
	DeleteAllMerchantAwardPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error)
}

type merchantAwardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantAwardServiceClient(cc grpc.ClientConnInterface) MerchantAwardServiceClient {
	return &merchantAwardServiceClient{cc}
}

func (c *merchantAwardServiceClient) FindAll(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantAward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantAward)
	err := c.cc.Invoke(ctx, MerchantAwardService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAwardServiceClient) FindById(ctx context.Context, in *FindByIdMerchantAwardRequest, opts ...grpc.CallOption) (*ApiResponseMerchantAward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAward)
	err := c.cc.Invoke(ctx, MerchantAwardService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAwardServiceClient) FindByActive(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantAwardDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantAwardDeleteAt)
	err := c.cc.Invoke(ctx, MerchantAwardService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAwardServiceClient) FindByTrashed(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantAwardDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantAwardDeleteAt)
	err := c.cc.Invoke(ctx, MerchantAwardService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAwardServiceClient) Create(ctx context.Context, in *CreateMerchantAwardRequest, opts ...grpc.CallOption) (*ApiResponseMerchantAward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAward)
	err := c.cc.Invoke(ctx, MerchantAwardService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAwardServiceClient) Update(ctx context.Context, in *UpdateMerchantAwardRequest, opts ...grpc.CallOption) (*ApiResponseMerchantAward, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAward)
	err := c.cc.Invoke(ctx, MerchantAwardService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAwardServiceClient) TrashedMerchantAward(ctx context.Context, in *FindByIdMerchantAwardRequest, opts ...grpc.CallOption) (*ApiResponseMerchantAwardDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAwardDeleteAt)
	err := c.cc.Invoke(ctx, MerchantAwardService_TrashedMerchantAward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAwardServiceClient) RestoreMerchantAward(ctx context.Context, in *FindByIdMerchantAwardRequest, opts ...grpc.CallOption) (*ApiResponseMerchantAwardDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAwardDeleteAt)
	err := c.cc.Invoke(ctx, MerchantAwardService_RestoreMerchantAward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAwardServiceClient) DeleteMerchantAwardPermanent(ctx context.Context, in *FindByIdMerchantAwardRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDelete)
	err := c.cc.Invoke(ctx, MerchantAwardService_DeleteMerchantAwardPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAwardServiceClient) RestoreAllMerchantAward(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAll)
	err := c.cc.Invoke(ctx, MerchantAwardService_RestoreAllMerchantAward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantAwardServiceClient) DeleteAllMerchantAwardPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAll)
	err := c.cc.Invoke(ctx, MerchantAwardService_DeleteAllMerchantAwardPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantAwardServiceServer is the server API for MerchantAwardService service.
// All implementations must embed UnimplementedMerchantAwardServiceServer
// for forward compatibility.
type MerchantAwardServiceServer interface {
	FindAll(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantAward, error)
	FindById(context.Context, *FindByIdMerchantAwardRequest) (*ApiResponseMerchantAward, error)
	FindByActive(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantAwardDeleteAt, error)
	FindByTrashed(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantAwardDeleteAt, error)
	Create(context.Context, *CreateMerchantAwardRequest) (*ApiResponseMerchantAward, error)
	Update(context.Context, *UpdateMerchantAwardRequest) (*ApiResponseMerchantAward, error)
	TrashedMerchantAward(context.Context, *FindByIdMerchantAwardRequest) (*ApiResponseMerchantAwardDeleteAt, error)
	RestoreMerchantAward(context.Context, *FindByIdMerchantAwardRequest) (*ApiResponseMerchantAwardDeleteAt, error)
	DeleteMerchantAwardPermanent(context.Context, *FindByIdMerchantAwardRequest) (*ApiResponseMerchantDelete, error)
	RestoreAllMerchantAward(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error)
	DeleteAllMerchantAwardPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error)
	mustEmbedUnimplementedMerchantAwardServiceServer()
}

// UnimplementedMerchantAwardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantAwardServiceServer struct{}

func (UnimplementedMerchantAwardServiceServer) FindAll(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantAward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedMerchantAwardServiceServer) FindById(context.Context, *FindByIdMerchantAwardRequest) (*ApiResponseMerchantAward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedMerchantAwardServiceServer) FindByActive(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantAwardDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedMerchantAwardServiceServer) FindByTrashed(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantAwardDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedMerchantAwardServiceServer) Create(context.Context, *CreateMerchantAwardRequest) (*ApiResponseMerchantAward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMerchantAwardServiceServer) Update(context.Context, *UpdateMerchantAwardRequest) (*ApiResponseMerchantAward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMerchantAwardServiceServer) TrashedMerchantAward(context.Context, *FindByIdMerchantAwardRequest) (*ApiResponseMerchantAwardDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedMerchantAward not implemented")
}
func (UnimplementedMerchantAwardServiceServer) RestoreMerchantAward(context.Context, *FindByIdMerchantAwardRequest) (*ApiResponseMerchantAwardDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreMerchantAward not implemented")
}
func (UnimplementedMerchantAwardServiceServer) DeleteMerchantAwardPermanent(context.Context, *FindByIdMerchantAwardRequest) (*ApiResponseMerchantDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMerchantAwardPermanent not implemented")
}
func (UnimplementedMerchantAwardServiceServer) RestoreAllMerchantAward(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllMerchantAward not implemented")
}
func (UnimplementedMerchantAwardServiceServer) DeleteAllMerchantAwardPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMerchantAwardPermanent not implemented")
}
func (UnimplementedMerchantAwardServiceServer) mustEmbedUnimplementedMerchantAwardServiceServer() {}
func (UnimplementedMerchantAwardServiceServer) testEmbeddedByValue()                              {}

// UnsafeMerchantAwardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantAwardServiceServer will
// result in compilation errors.
type UnsafeMerchantAwardServiceServer interface {
	mustEmbedUnimplementedMerchantAwardServiceServer()
}

func RegisterMerchantAwardServiceServer(s grpc.ServiceRegistrar, srv MerchantAwardServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantAwardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantAwardService_ServiceDesc, srv)
}

func _MerchantAwardService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAwardServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAwardService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAwardServiceServer).FindAll(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAwardService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantAwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAwardServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAwardService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAwardServiceServer).FindById(ctx, req.(*FindByIdMerchantAwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAwardService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAwardServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAwardService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAwardServiceServer).FindByActive(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAwardService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAwardServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAwardService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAwardServiceServer).FindByTrashed(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAwardService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantAwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAwardServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAwardService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAwardServiceServer).Create(ctx, req.(*CreateMerchantAwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAwardService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantAwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAwardServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAwardService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAwardServiceServer).Update(ctx, req.(*UpdateMerchantAwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAwardService_TrashedMerchantAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantAwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAwardServiceServer).TrashedMerchantAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAwardService_TrashedMerchantAward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAwardServiceServer).TrashedMerchantAward(ctx, req.(*FindByIdMerchantAwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAwardService_RestoreMerchantAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantAwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAwardServiceServer).RestoreMerchantAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAwardService_RestoreMerchantAward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAwardServiceServer).RestoreMerchantAward(ctx, req.(*FindByIdMerchantAwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAwardService_DeleteMerchantAwardPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantAwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAwardServiceServer).DeleteMerchantAwardPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAwardService_DeleteMerchantAwardPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAwardServiceServer).DeleteMerchantAwardPermanent(ctx, req.(*FindByIdMerchantAwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAwardService_RestoreAllMerchantAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAwardServiceServer).RestoreAllMerchantAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAwardService_RestoreAllMerchantAward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAwardServiceServer).RestoreAllMerchantAward(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantAwardService_DeleteAllMerchantAwardPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantAwardServiceServer).DeleteAllMerchantAwardPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantAwardService_DeleteAllMerchantAwardPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantAwardServiceServer).DeleteAllMerchantAwardPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantAwardService_ServiceDesc is the grpc.ServiceDesc for MerchantAwardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantAwardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MerchantAwardService",
	HandlerType: (*MerchantAwardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _MerchantAwardService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _MerchantAwardService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _MerchantAwardService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _MerchantAwardService_FindByTrashed_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MerchantAwardService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MerchantAwardService_Update_Handler,
		},
		{
			MethodName: "TrashedMerchantAward",
			Handler:    _MerchantAwardService_TrashedMerchantAward_Handler,
		},
		{
			MethodName: "RestoreMerchantAward",
			Handler:    _MerchantAwardService_RestoreMerchantAward_Handler,
		},
		{
			MethodName: "DeleteMerchantAwardPermanent",
			Handler:    _MerchantAwardService_DeleteMerchantAwardPermanent_Handler,
		},
		{
			MethodName: "RestoreAllMerchantAward",
			Handler:    _MerchantAwardService_RestoreAllMerchantAward_Handler,
		},
		{
			MethodName: "DeleteAllMerchantAwardPermanent",
			Handler:    _MerchantAwardService_DeleteAllMerchantAwardPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant_award.proto",
}
