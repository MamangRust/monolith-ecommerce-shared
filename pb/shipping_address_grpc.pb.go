// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: shipping_address.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShippingService_FindAll_FullMethodName                    = "/pb.ShippingService/FindAll"
	ShippingService_FindById_FullMethodName                   = "/pb.ShippingService/FindById"
	ShippingService_FindByOrder_FullMethodName                = "/pb.ShippingService/FindByOrder"
	ShippingService_FindByActive_FullMethodName               = "/pb.ShippingService/FindByActive"
	ShippingService_FindByTrashed_FullMethodName              = "/pb.ShippingService/FindByTrashed"
	ShippingService_TrashedShipping_FullMethodName            = "/pb.ShippingService/TrashedShipping"
	ShippingService_RestoreShipping_FullMethodName            = "/pb.ShippingService/RestoreShipping"
	ShippingService_DeleteShippingPermanent_FullMethodName    = "/pb.ShippingService/DeleteShippingPermanent"
	ShippingService_RestoreAllShipping_FullMethodName         = "/pb.ShippingService/RestoreAllShipping"
	ShippingService_DeleteAllShippingPermanent_FullMethodName = "/pb.ShippingService/DeleteAllShippingPermanent"
)

// ShippingServiceClient is the client API for ShippingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingServiceClient interface {
	FindAll(ctx context.Context, in *FindAllShippingRequest, opts ...grpc.CallOption) (*ApiResponsePaginationShipping, error)
	FindById(ctx context.Context, in *FindByIdShippingRequest, opts ...grpc.CallOption) (*ApiResponseShipping, error)
	FindByOrder(ctx context.Context, in *FindByIdShippingRequest, opts ...grpc.CallOption) (*ApiResponseShipping, error)
	FindByActive(ctx context.Context, in *FindAllShippingRequest, opts ...grpc.CallOption) (*ApiResponsePaginationShippingDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllShippingRequest, opts ...grpc.CallOption) (*ApiResponsePaginationShippingDeleteAt, error)
	TrashedShipping(ctx context.Context, in *FindByIdShippingRequest, opts ...grpc.CallOption) (*ApiResponseShippingDeleteAt, error)
	RestoreShipping(ctx context.Context, in *FindByIdShippingRequest, opts ...grpc.CallOption) (*ApiResponseShippingDeleteAt, error)
	DeleteShippingPermanent(ctx context.Context, in *FindByIdShippingRequest, opts ...grpc.CallOption) (*ApiResponseShippingDelete, error)
	RestoreAllShipping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseShippingAll, error)
	DeleteAllShippingPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseShippingAll, error)
}

type shippingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingServiceClient(cc grpc.ClientConnInterface) ShippingServiceClient {
	return &shippingServiceClient{cc}
}

func (c *shippingServiceClient) FindAll(ctx context.Context, in *FindAllShippingRequest, opts ...grpc.CallOption) (*ApiResponsePaginationShipping, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationShipping)
	err := c.cc.Invoke(ctx, ShippingService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) FindById(ctx context.Context, in *FindByIdShippingRequest, opts ...grpc.CallOption) (*ApiResponseShipping, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseShipping)
	err := c.cc.Invoke(ctx, ShippingService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) FindByOrder(ctx context.Context, in *FindByIdShippingRequest, opts ...grpc.CallOption) (*ApiResponseShipping, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseShipping)
	err := c.cc.Invoke(ctx, ShippingService_FindByOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) FindByActive(ctx context.Context, in *FindAllShippingRequest, opts ...grpc.CallOption) (*ApiResponsePaginationShippingDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationShippingDeleteAt)
	err := c.cc.Invoke(ctx, ShippingService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) FindByTrashed(ctx context.Context, in *FindAllShippingRequest, opts ...grpc.CallOption) (*ApiResponsePaginationShippingDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationShippingDeleteAt)
	err := c.cc.Invoke(ctx, ShippingService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) TrashedShipping(ctx context.Context, in *FindByIdShippingRequest, opts ...grpc.CallOption) (*ApiResponseShippingDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseShippingDeleteAt)
	err := c.cc.Invoke(ctx, ShippingService_TrashedShipping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) RestoreShipping(ctx context.Context, in *FindByIdShippingRequest, opts ...grpc.CallOption) (*ApiResponseShippingDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseShippingDeleteAt)
	err := c.cc.Invoke(ctx, ShippingService_RestoreShipping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) DeleteShippingPermanent(ctx context.Context, in *FindByIdShippingRequest, opts ...grpc.CallOption) (*ApiResponseShippingDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseShippingDelete)
	err := c.cc.Invoke(ctx, ShippingService_DeleteShippingPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) RestoreAllShipping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseShippingAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseShippingAll)
	err := c.cc.Invoke(ctx, ShippingService_RestoreAllShipping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) DeleteAllShippingPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseShippingAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseShippingAll)
	err := c.cc.Invoke(ctx, ShippingService_DeleteAllShippingPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingServiceServer is the server API for ShippingService service.
// All implementations must embed UnimplementedShippingServiceServer
// for forward compatibility.
type ShippingServiceServer interface {
	FindAll(context.Context, *FindAllShippingRequest) (*ApiResponsePaginationShipping, error)
	FindById(context.Context, *FindByIdShippingRequest) (*ApiResponseShipping, error)
	FindByOrder(context.Context, *FindByIdShippingRequest) (*ApiResponseShipping, error)
	FindByActive(context.Context, *FindAllShippingRequest) (*ApiResponsePaginationShippingDeleteAt, error)
	FindByTrashed(context.Context, *FindAllShippingRequest) (*ApiResponsePaginationShippingDeleteAt, error)
	TrashedShipping(context.Context, *FindByIdShippingRequest) (*ApiResponseShippingDeleteAt, error)
	RestoreShipping(context.Context, *FindByIdShippingRequest) (*ApiResponseShippingDeleteAt, error)
	DeleteShippingPermanent(context.Context, *FindByIdShippingRequest) (*ApiResponseShippingDelete, error)
	RestoreAllShipping(context.Context, *emptypb.Empty) (*ApiResponseShippingAll, error)
	DeleteAllShippingPermanent(context.Context, *emptypb.Empty) (*ApiResponseShippingAll, error)
	mustEmbedUnimplementedShippingServiceServer()
}

// UnimplementedShippingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShippingServiceServer struct{}

func (UnimplementedShippingServiceServer) FindAll(context.Context, *FindAllShippingRequest) (*ApiResponsePaginationShipping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedShippingServiceServer) FindById(context.Context, *FindByIdShippingRequest) (*ApiResponseShipping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedShippingServiceServer) FindByOrder(context.Context, *FindByIdShippingRequest) (*ApiResponseShipping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByOrder not implemented")
}
func (UnimplementedShippingServiceServer) FindByActive(context.Context, *FindAllShippingRequest) (*ApiResponsePaginationShippingDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedShippingServiceServer) FindByTrashed(context.Context, *FindAllShippingRequest) (*ApiResponsePaginationShippingDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedShippingServiceServer) TrashedShipping(context.Context, *FindByIdShippingRequest) (*ApiResponseShippingDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedShipping not implemented")
}
func (UnimplementedShippingServiceServer) RestoreShipping(context.Context, *FindByIdShippingRequest) (*ApiResponseShippingDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreShipping not implemented")
}
func (UnimplementedShippingServiceServer) DeleteShippingPermanent(context.Context, *FindByIdShippingRequest) (*ApiResponseShippingDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShippingPermanent not implemented")
}
func (UnimplementedShippingServiceServer) RestoreAllShipping(context.Context, *emptypb.Empty) (*ApiResponseShippingAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllShipping not implemented")
}
func (UnimplementedShippingServiceServer) DeleteAllShippingPermanent(context.Context, *emptypb.Empty) (*ApiResponseShippingAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllShippingPermanent not implemented")
}
func (UnimplementedShippingServiceServer) mustEmbedUnimplementedShippingServiceServer() {}
func (UnimplementedShippingServiceServer) testEmbeddedByValue()                         {}

// UnsafeShippingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingServiceServer will
// result in compilation errors.
type UnsafeShippingServiceServer interface {
	mustEmbedUnimplementedShippingServiceServer()
}

func RegisterShippingServiceServer(s grpc.ServiceRegistrar, srv ShippingServiceServer) {
	// If the following call pancis, it indicates UnimplementedShippingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShippingService_ServiceDesc, srv)
}

func _ShippingService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).FindAll(ctx, req.(*FindAllShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).FindById(ctx, req.(*FindByIdShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_FindByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).FindByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_FindByOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).FindByOrder(ctx, req.(*FindByIdShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).FindByActive(ctx, req.(*FindAllShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).FindByTrashed(ctx, req.(*FindAllShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_TrashedShipping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).TrashedShipping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_TrashedShipping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).TrashedShipping(ctx, req.(*FindByIdShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_RestoreShipping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).RestoreShipping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_RestoreShipping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).RestoreShipping(ctx, req.(*FindByIdShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_DeleteShippingPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).DeleteShippingPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_DeleteShippingPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).DeleteShippingPermanent(ctx, req.(*FindByIdShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_RestoreAllShipping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).RestoreAllShipping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_RestoreAllShipping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).RestoreAllShipping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_DeleteAllShippingPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).DeleteAllShippingPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_DeleteAllShippingPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).DeleteAllShippingPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingService_ServiceDesc is the grpc.ServiceDesc for ShippingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ShippingService",
	HandlerType: (*ShippingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _ShippingService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _ShippingService_FindById_Handler,
		},
		{
			MethodName: "FindByOrder",
			Handler:    _ShippingService_FindByOrder_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _ShippingService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _ShippingService_FindByTrashed_Handler,
		},
		{
			MethodName: "TrashedShipping",
			Handler:    _ShippingService_TrashedShipping_Handler,
		},
		{
			MethodName: "RestoreShipping",
			Handler:    _ShippingService_RestoreShipping_Handler,
		},
		{
			MethodName: "DeleteShippingPermanent",
			Handler:    _ShippingService_DeleteShippingPermanent_Handler,
		},
		{
			MethodName: "RestoreAllShipping",
			Handler:    _ShippingService_RestoreAllShipping_Handler,
		},
		{
			MethodName: "DeleteAllShippingPermanent",
			Handler:    _ShippingService_DeleteAllShippingPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shipping_address.proto",
}
