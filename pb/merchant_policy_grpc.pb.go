// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: merchant_policy.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchantPoliciesService_FindAll_FullMethodName                            = "/pb.MerchantPoliciesService/FindAll"
	MerchantPoliciesService_FindById_FullMethodName                           = "/pb.MerchantPoliciesService/FindById"
	MerchantPoliciesService_FindByActive_FullMethodName                       = "/pb.MerchantPoliciesService/FindByActive"
	MerchantPoliciesService_FindByTrashed_FullMethodName                      = "/pb.MerchantPoliciesService/FindByTrashed"
	MerchantPoliciesService_Create_FullMethodName                             = "/pb.MerchantPoliciesService/Create"
	MerchantPoliciesService_Update_FullMethodName                             = "/pb.MerchantPoliciesService/Update"
	MerchantPoliciesService_TrashedMerchantPolicies_FullMethodName            = "/pb.MerchantPoliciesService/TrashedMerchantPolicies"
	MerchantPoliciesService_RestoreMerchantPolicies_FullMethodName            = "/pb.MerchantPoliciesService/RestoreMerchantPolicies"
	MerchantPoliciesService_DeleteMerchantPoliciesPermanent_FullMethodName    = "/pb.MerchantPoliciesService/DeleteMerchantPoliciesPermanent"
	MerchantPoliciesService_RestoreAllMerchantPolicies_FullMethodName         = "/pb.MerchantPoliciesService/RestoreAllMerchantPolicies"
	MerchantPoliciesService_DeleteAllMerchantPoliciesPermanent_FullMethodName = "/pb.MerchantPoliciesService/DeleteAllMerchantPoliciesPermanent"
)

// MerchantPoliciesServiceClient is the client API for MerchantPoliciesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantPoliciesServiceClient interface {
	FindAll(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantPolicies, error)
	FindById(ctx context.Context, in *FindByIdMerchantPoliciesRequest, opts ...grpc.CallOption) (*ApiResponseMerchantPolicies, error)
	FindByActive(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantPoliciesDeleteAt, error)
	FindByTrashed(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantPoliciesDeleteAt, error)
	Create(ctx context.Context, in *CreateMerchantPoliciesRequest, opts ...grpc.CallOption) (*ApiResponseMerchantPolicies, error)
	Update(ctx context.Context, in *UpdateMerchantPoliciesRequest, opts ...grpc.CallOption) (*ApiResponseMerchantPolicies, error)
	TrashedMerchantPolicies(ctx context.Context, in *FindByIdMerchantPoliciesRequest, opts ...grpc.CallOption) (*ApiResponseMerchantPoliciesDeleteAt, error)
	RestoreMerchantPolicies(ctx context.Context, in *FindByIdMerchantPoliciesRequest, opts ...grpc.CallOption) (*ApiResponseMerchantPoliciesDeleteAt, error)
	DeleteMerchantPoliciesPermanent(ctx context.Context, in *FindByIdMerchantPoliciesRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDelete, error)
	RestoreAllMerchantPolicies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error)
	DeleteAllMerchantPoliciesPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error)
}

type merchantPoliciesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantPoliciesServiceClient(cc grpc.ClientConnInterface) MerchantPoliciesServiceClient {
	return &merchantPoliciesServiceClient{cc}
}

func (c *merchantPoliciesServiceClient) FindAll(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantPolicies, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantPolicies)
	err := c.cc.Invoke(ctx, MerchantPoliciesService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantPoliciesServiceClient) FindById(ctx context.Context, in *FindByIdMerchantPoliciesRequest, opts ...grpc.CallOption) (*ApiResponseMerchantPolicies, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantPolicies)
	err := c.cc.Invoke(ctx, MerchantPoliciesService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantPoliciesServiceClient) FindByActive(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantPoliciesDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantPoliciesDeleteAt)
	err := c.cc.Invoke(ctx, MerchantPoliciesService_FindByActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantPoliciesServiceClient) FindByTrashed(ctx context.Context, in *FindAllMerchantRequest, opts ...grpc.CallOption) (*ApiResponsePaginationMerchantPoliciesDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponsePaginationMerchantPoliciesDeleteAt)
	err := c.cc.Invoke(ctx, MerchantPoliciesService_FindByTrashed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantPoliciesServiceClient) Create(ctx context.Context, in *CreateMerchantPoliciesRequest, opts ...grpc.CallOption) (*ApiResponseMerchantPolicies, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantPolicies)
	err := c.cc.Invoke(ctx, MerchantPoliciesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantPoliciesServiceClient) Update(ctx context.Context, in *UpdateMerchantPoliciesRequest, opts ...grpc.CallOption) (*ApiResponseMerchantPolicies, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantPolicies)
	err := c.cc.Invoke(ctx, MerchantPoliciesService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantPoliciesServiceClient) TrashedMerchantPolicies(ctx context.Context, in *FindByIdMerchantPoliciesRequest, opts ...grpc.CallOption) (*ApiResponseMerchantPoliciesDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantPoliciesDeleteAt)
	err := c.cc.Invoke(ctx, MerchantPoliciesService_TrashedMerchantPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantPoliciesServiceClient) RestoreMerchantPolicies(ctx context.Context, in *FindByIdMerchantPoliciesRequest, opts ...grpc.CallOption) (*ApiResponseMerchantPoliciesDeleteAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantPoliciesDeleteAt)
	err := c.cc.Invoke(ctx, MerchantPoliciesService_RestoreMerchantPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantPoliciesServiceClient) DeleteMerchantPoliciesPermanent(ctx context.Context, in *FindByIdMerchantPoliciesRequest, opts ...grpc.CallOption) (*ApiResponseMerchantDelete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantDelete)
	err := c.cc.Invoke(ctx, MerchantPoliciesService_DeleteMerchantPoliciesPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantPoliciesServiceClient) RestoreAllMerchantPolicies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAll)
	err := c.cc.Invoke(ctx, MerchantPoliciesService_RestoreAllMerchantPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantPoliciesServiceClient) DeleteAllMerchantPoliciesPermanent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiResponseMerchantAll, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiResponseMerchantAll)
	err := c.cc.Invoke(ctx, MerchantPoliciesService_DeleteAllMerchantPoliciesPermanent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantPoliciesServiceServer is the server API for MerchantPoliciesService service.
// All implementations must embed UnimplementedMerchantPoliciesServiceServer
// for forward compatibility.
type MerchantPoliciesServiceServer interface {
	FindAll(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantPolicies, error)
	FindById(context.Context, *FindByIdMerchantPoliciesRequest) (*ApiResponseMerchantPolicies, error)
	FindByActive(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantPoliciesDeleteAt, error)
	FindByTrashed(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantPoliciesDeleteAt, error)
	Create(context.Context, *CreateMerchantPoliciesRequest) (*ApiResponseMerchantPolicies, error)
	Update(context.Context, *UpdateMerchantPoliciesRequest) (*ApiResponseMerchantPolicies, error)
	TrashedMerchantPolicies(context.Context, *FindByIdMerchantPoliciesRequest) (*ApiResponseMerchantPoliciesDeleteAt, error)
	RestoreMerchantPolicies(context.Context, *FindByIdMerchantPoliciesRequest) (*ApiResponseMerchantPoliciesDeleteAt, error)
	DeleteMerchantPoliciesPermanent(context.Context, *FindByIdMerchantPoliciesRequest) (*ApiResponseMerchantDelete, error)
	RestoreAllMerchantPolicies(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error)
	DeleteAllMerchantPoliciesPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error)
	mustEmbedUnimplementedMerchantPoliciesServiceServer()
}

// UnimplementedMerchantPoliciesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchantPoliciesServiceServer struct{}

func (UnimplementedMerchantPoliciesServiceServer) FindAll(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantPolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedMerchantPoliciesServiceServer) FindById(context.Context, *FindByIdMerchantPoliciesRequest) (*ApiResponseMerchantPolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedMerchantPoliciesServiceServer) FindByActive(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantPoliciesDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByActive not implemented")
}
func (UnimplementedMerchantPoliciesServiceServer) FindByTrashed(context.Context, *FindAllMerchantRequest) (*ApiResponsePaginationMerchantPoliciesDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByTrashed not implemented")
}
func (UnimplementedMerchantPoliciesServiceServer) Create(context.Context, *CreateMerchantPoliciesRequest) (*ApiResponseMerchantPolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMerchantPoliciesServiceServer) Update(context.Context, *UpdateMerchantPoliciesRequest) (*ApiResponseMerchantPolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMerchantPoliciesServiceServer) TrashedMerchantPolicies(context.Context, *FindByIdMerchantPoliciesRequest) (*ApiResponseMerchantPoliciesDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrashedMerchantPolicies not implemented")
}
func (UnimplementedMerchantPoliciesServiceServer) RestoreMerchantPolicies(context.Context, *FindByIdMerchantPoliciesRequest) (*ApiResponseMerchantPoliciesDeleteAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreMerchantPolicies not implemented")
}
func (UnimplementedMerchantPoliciesServiceServer) DeleteMerchantPoliciesPermanent(context.Context, *FindByIdMerchantPoliciesRequest) (*ApiResponseMerchantDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMerchantPoliciesPermanent not implemented")
}
func (UnimplementedMerchantPoliciesServiceServer) RestoreAllMerchantPolicies(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAllMerchantPolicies not implemented")
}
func (UnimplementedMerchantPoliciesServiceServer) DeleteAllMerchantPoliciesPermanent(context.Context, *emptypb.Empty) (*ApiResponseMerchantAll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMerchantPoliciesPermanent not implemented")
}
func (UnimplementedMerchantPoliciesServiceServer) mustEmbedUnimplementedMerchantPoliciesServiceServer() {
}
func (UnimplementedMerchantPoliciesServiceServer) testEmbeddedByValue() {}

// UnsafeMerchantPoliciesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantPoliciesServiceServer will
// result in compilation errors.
type UnsafeMerchantPoliciesServiceServer interface {
	mustEmbedUnimplementedMerchantPoliciesServiceServer()
}

func RegisterMerchantPoliciesServiceServer(s grpc.ServiceRegistrar, srv MerchantPoliciesServiceServer) {
	// If the following call pancis, it indicates UnimplementedMerchantPoliciesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchantPoliciesService_ServiceDesc, srv)
}

func _MerchantPoliciesService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantPoliciesServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantPoliciesService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantPoliciesServiceServer).FindAll(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantPoliciesService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantPoliciesServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantPoliciesService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantPoliciesServiceServer).FindById(ctx, req.(*FindByIdMerchantPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantPoliciesService_FindByActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantPoliciesServiceServer).FindByActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantPoliciesService_FindByActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantPoliciesServiceServer).FindByActive(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantPoliciesService_FindByTrashed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantPoliciesServiceServer).FindByTrashed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantPoliciesService_FindByTrashed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantPoliciesServiceServer).FindByTrashed(ctx, req.(*FindAllMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantPoliciesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantPoliciesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantPoliciesService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantPoliciesServiceServer).Create(ctx, req.(*CreateMerchantPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantPoliciesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantPoliciesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantPoliciesService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantPoliciesServiceServer).Update(ctx, req.(*UpdateMerchantPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantPoliciesService_TrashedMerchantPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantPoliciesServiceServer).TrashedMerchantPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantPoliciesService_TrashedMerchantPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantPoliciesServiceServer).TrashedMerchantPolicies(ctx, req.(*FindByIdMerchantPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantPoliciesService_RestoreMerchantPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantPoliciesServiceServer).RestoreMerchantPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantPoliciesService_RestoreMerchantPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantPoliciesServiceServer).RestoreMerchantPolicies(ctx, req.(*FindByIdMerchantPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantPoliciesService_DeleteMerchantPoliciesPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdMerchantPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantPoliciesServiceServer).DeleteMerchantPoliciesPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantPoliciesService_DeleteMerchantPoliciesPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantPoliciesServiceServer).DeleteMerchantPoliciesPermanent(ctx, req.(*FindByIdMerchantPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantPoliciesService_RestoreAllMerchantPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantPoliciesServiceServer).RestoreAllMerchantPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantPoliciesService_RestoreAllMerchantPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantPoliciesServiceServer).RestoreAllMerchantPolicies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantPoliciesService_DeleteAllMerchantPoliciesPermanent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantPoliciesServiceServer).DeleteAllMerchantPoliciesPermanent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantPoliciesService_DeleteAllMerchantPoliciesPermanent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantPoliciesServiceServer).DeleteAllMerchantPoliciesPermanent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantPoliciesService_ServiceDesc is the grpc.ServiceDesc for MerchantPoliciesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantPoliciesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MerchantPoliciesService",
	HandlerType: (*MerchantPoliciesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAll",
			Handler:    _MerchantPoliciesService_FindAll_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _MerchantPoliciesService_FindById_Handler,
		},
		{
			MethodName: "FindByActive",
			Handler:    _MerchantPoliciesService_FindByActive_Handler,
		},
		{
			MethodName: "FindByTrashed",
			Handler:    _MerchantPoliciesService_FindByTrashed_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MerchantPoliciesService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MerchantPoliciesService_Update_Handler,
		},
		{
			MethodName: "TrashedMerchantPolicies",
			Handler:    _MerchantPoliciesService_TrashedMerchantPolicies_Handler,
		},
		{
			MethodName: "RestoreMerchantPolicies",
			Handler:    _MerchantPoliciesService_RestoreMerchantPolicies_Handler,
		},
		{
			MethodName: "DeleteMerchantPoliciesPermanent",
			Handler:    _MerchantPoliciesService_DeleteMerchantPoliciesPermanent_Handler,
		},
		{
			MethodName: "RestoreAllMerchantPolicies",
			Handler:    _MerchantPoliciesService_RestoreAllMerchantPolicies_Handler,
		},
		{
			MethodName: "DeleteAllMerchantPoliciesPermanent",
			Handler:    _MerchantPoliciesService_DeleteAllMerchantPoliciesPermanent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant_policy.proto",
}
